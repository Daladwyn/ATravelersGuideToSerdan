// <auto-generated />
using System;
using ATravelersGuideToSerdan.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ATravelersGuideToSerdan.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190713174206_Added Playing character and minor links")]
    partial class AddedPlayingcharacterandminorlinks
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityDescription")
                        .HasMaxLength(200);

                    b.Property<bool>("CityIsCapital");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int>("CityPopulation");

                    b.Property<int>("CountryId");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArmySize")
                        .HasMaxLength(200);

                    b.Property<string>("ArmyStrenght")
                        .HasMaxLength(200);

                    b.Property<int>("CapitalId");

                    b.Property<string>("CountryClimat")
                        .HasMaxLength(200);

                    b.Property<string>("CountryDescription")
                        .HasMaxLength(200);

                    b.Property<string>("CountryGeography")
                        .HasMaxLength(200);

                    b.Property<string>("CountryHistory")
                        .HasMaxLength(500);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int>("CountryPopulation");

                    b.Property<string>("Export")
                        .HasMaxLength(200);

                    b.Property<string>("Fauna")
                        .HasMaxLength(200);

                    b.Property<string>("Flora")
                        .HasMaxLength(200);

                    b.Property<string>("Government")
                        .HasMaxLength(40);

                    b.Property<int>("HeadOfStateId");

                    b.Property<string>("Import")
                        .HasMaxLength(200);

                    b.Property<string>("NavalSize")
                        .HasMaxLength(200);

                    b.Property<string>("NavalStrenght")
                        .HasMaxLength(200);

                    b.Property<int>("PlanetId");

                    b.HasKey("CountryId");

                    b.HasIndex("PlanetId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NPC", b =>
                {
                    b.Property<int>("NpcId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NpcAlias")
                        .HasMaxLength(40);

                    b.Property<int>("NpcArchetyp");

                    b.Property<string>("NpcAsAParent")
                        .HasMaxLength(200);

                    b.Property<string>("NpcAssets")
                        .HasMaxLength(200);

                    b.Property<string>("NpcBehaviour")
                        .HasMaxLength(200);

                    b.Property<string>("NpcCurrentResidence")
                        .HasMaxLength(40);

                    b.Property<string>("NpcDescription")
                        .HasMaxLength(200);

                    b.Property<string>("NpcDescriptivePhrase")
                        .HasMaxLength(100);

                    b.Property<string>("NpcEvenKnownAs");

                    b.Property<string>("NpcFamily")
                        .HasMaxLength(40);

                    b.Property<string>("NpcGoal")
                        .HasMaxLength(200);

                    b.Property<string>("NpcInBattle")
                        .HasMaxLength(200);

                    b.Property<string>("NpcInTheHistory")
                        .HasMaxLength(300);

                    b.Property<bool>("NpcIsAPlayer");

                    b.Property<int>("NpcKilledBy");

                    b.Property<string>("NpcLooks")
                        .HasMaxLength(100);

                    b.Property<string>("NpcName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("NpcOtherResideces")
                        .HasMaxLength(200);

                    b.Property<string>("NpcRace")
                        .HasMaxLength(20);

                    b.Property<string>("NpcRegardingAets")
                        .HasMaxLength(100);

                    b.Property<string>("NpcRegardingDemons")
                        .HasMaxLength(100);

                    b.Property<string>("NpcRegardingDragons")
                        .HasMaxLength(100);

                    b.Property<string>("NpcRegardingGrips")
                        .HasMaxLength(100);

                    b.Property<string>("NpcRegardingOthers")
                        .HasMaxLength(100);

                    b.Property<string>("NpcSecrets")
                        .HasMaxLength(300);

                    b.Property<int>("NpcsFather");

                    b.Property<int>("NpcsMother");

                    b.HasKey("NpcId");

                    b.ToTable("NPCs");
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcAlly", b =>
                {
                    b.Property<int>("NpcAllyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllyId");

                    b.Property<string>("AllyName");

                    b.Property<int>("NpcId");

                    b.HasKey("NpcAllyId");

                    b.HasIndex("NpcId");

                    b.ToTable("NpcAlly");
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcEnemy", b =>
                {
                    b.Property<int>("NpcEnemyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnemyId");

                    b.Property<string>("EnemyName");

                    b.Property<int>("NpcId");

                    b.HasKey("NpcEnemyId");

                    b.HasIndex("NpcId");

                    b.ToTable("NpcEnemy");
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcFriend", b =>
                {
                    b.Property<int>("NpcFriendId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FriendId");

                    b.Property<string>("FriendName");

                    b.Property<int>("NpcId");

                    b.HasKey("NpcFriendId");

                    b.HasIndex("NpcId");

                    b.ToTable("NpcFriend");
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcMagic", b =>
                {
                    b.Property<int>("NpcMagicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("MagiAlkemi");

                    b.Property<bool>("MagiBlod");

                    b.Property<bool>("MagiDraperiet");

                    b.Property<bool>("MagiDrommen");

                    b.Property<bool>("MagiDysterheten");

                    b.Property<bool>("MagiElementa");

                    b.Property<bool>("MagiEnergi");

                    b.Property<bool>("MagiEtnor");

                    b.Property<bool>("MagiKraft");

                    b.Property<bool>("MagiLiv");

                    b.Property<bool>("MagiMateria");

                    b.Property<bool>("MagiOkaMinska");

                    b.Property<bool>("MagiOmvandling");

                    b.Property<bool>("MagiParallellium");

                    b.Property<bool>("MagiRum");

                    b.Property<bool>("MagiSe");

                    b.Property<bool>("MagiSinne");

                    b.Property<bool>("MagiSjal");

                    b.Property<bool>("MagiSkapa");

                    b.Property<bool>("MagiSlojan");

                    b.Property<bool>("MagiSymbol");

                    b.Property<bool>("MagiTid");

                    b.Property<bool>("MagiTransformering");

                    b.Property<bool>("MagiVerkligheten");

                    b.Property<bool>("MagiVisuellt");

                    b.Property<int>("NpcId");

                    b.Property<int>("SummaPoangMagi");

                    b.HasKey("NpcMagicId");

                    b.ToTable("NpcMagics");
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcPower", b =>
                {
                    b.Property<int>("NpcPowerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NpcId");

                    b.Property<byte>("PowerAnimal");

                    b.Property<byte>("PowerBody");

                    b.Property<byte>("PowerDarkness");

                    b.Property<byte>("PowerDoor");

                    b.Property<byte>("PowerDragon");

                    b.Property<byte>("PowerEarth");

                    b.Property<byte>("PowerElectricity");

                    b.Property<byte>("PowerElementa");

                    b.Property<byte>("PowerFire");

                    b.Property<byte>("PowerGriffon");

                    b.Property<byte>("PowerHealer");

                    b.Property<byte>("PowerLight");

                    b.Property<byte>("PowerManticore");

                    b.Property<byte>("PowerMateria");

                    b.Property<byte>("PowerMind");

                    b.Property<byte>("PowerNature");

                    b.Property<byte>("PowerSword");

                    b.Property<byte>("PowerSymbol");

                    b.Property<byte>("PowerUnicorn");

                    b.Property<byte>("PowerWater");

                    b.Property<byte>("PowerWind");

                    b.Property<int>("SummaPoangKrafter");

                    b.HasKey("NpcPowerId");

                    b.ToTable("NpcPowers");
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcRival", b =>
                {
                    b.Property<int>("NpcRivalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NpcId");

                    b.Property<int>("RivalId");

                    b.Property<string>("RivalName");

                    b.HasKey("NpcRivalId");

                    b.HasIndex("NpcId");

                    b.ToTable("NpcRival");
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcStat", b =>
                {
                    b.Property<int>("NpcStatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("AetContact");

                    b.Property<string>("AetContactWho")
                        .HasMaxLength(50);

                    b.Property<int>("AttentionExp");

                    b.Property<string>("AttentionSkills");

                    b.Property<int>("AttentionTTp");

                    b.Property<string>("AttentionTalang");

                    b.Property<int>("AttentionTp");

                    b.Property<int>("AttentionValue");

                    b.Property<int>("BalisticExp");

                    b.Property<string>("BalisticSkills");

                    b.Property<int>("BalisticTTp");

                    b.Property<string>("BalisticTalang");

                    b.Property<int>("BalisticTp");

                    b.Property<int>("BalisticValue");

                    b.Property<int>("BraDaligtBlod");

                    b.Property<int>("BundnaKraftPoang");

                    b.Property<int>("CharismaExp");

                    b.Property<string>("CharismaSkills");

                    b.Property<int>("CharismaTTp");

                    b.Property<string>("CharismaTalang");

                    b.Property<int>("CharismaTp");

                    b.Property<int>("CharismaValue");

                    b.Property<int>("CreativityExp");

                    b.Property<string>("CreativitySkills");

                    b.Property<int>("CreativityTTp");

                    b.Property<string>("CreativityTalang");

                    b.Property<int>("CreativityTp");

                    b.Property<int>("CreativityValue");

                    b.Property<byte>("DemonContact");

                    b.Property<string>("DemonContactWho")
                        .HasMaxLength(50);

                    b.Property<byte>("DragonContact");

                    b.Property<string>("DragonContactWho")
                        .HasMaxLength(50);

                    b.Property<byte>("EdlosiContact");

                    b.Property<string>("EdlosiContactWho")
                        .HasMaxLength(50);

                    b.Property<int>("EducationExp");

                    b.Property<string>("EducationSkills");

                    b.Property<int>("EducationTTp");

                    b.Property<string>("EducationTalang");

                    b.Property<int>("EducationTp");

                    b.Property<int>("EducationValue");

                    b.Property<int>("FineMotorExp");

                    b.Property<string>("FineMotorSkills");

                    b.Property<int>("FineMotorTTp");

                    b.Property<string>("FineMotorTalang");

                    b.Property<int>("FineMotorTp");

                    b.Property<int>("FineMotorValue");

                    b.Property<byte>("GriffonContact");

                    b.Property<string>("GriffonContactWho")
                        .HasMaxLength(50);

                    b.Property<int>("GuardianFriend");

                    b.Property<string>("GuardianFriendWho")
                        .HasMaxLength(50);

                    b.Property<int>("InsightExp");

                    b.Property<string>("InsightSkills");

                    b.Property<int>("InsightTTp");

                    b.Property<string>("InsightTalang");

                    b.Property<int>("InsightTp");

                    b.Property<int>("InsightValue");

                    b.Property<int>("IntuitionExp");

                    b.Property<string>("IntuitionSkills");

                    b.Property<int>("IntuitionTTp");

                    b.Property<string>("IntuitionTalang");

                    b.Property<int>("IntuitionTp");

                    b.Property<int>("IntuitionValue");

                    b.Property<int>("KoordinationMotorikTot");

                    b.Property<int>("KoordinationMotorikUts");

                    b.Property<int>("KraftPoang");

                    b.Property<int>("MagicVisionExp");

                    b.Property<string>("MagicVisionSkills");

                    b.Property<int>("MagicVisionTTp");

                    b.Property<string>("MagicVisionTalang");

                    b.Property<int>("MagicVisionTp");

                    b.Property<int>("MagicVisionValue");

                    b.Property<int>("MobilityExp");

                    b.Property<string>("MobilitySkills");

                    b.Property<int>("MobilityTTp");

                    b.Property<string>("MobilityTalang");

                    b.Property<int>("MobilityTp");

                    b.Property<int>("MobilityValue");

                    b.Property<int>("NpcId");

                    b.Property<int>("PerceptionTot");

                    b.Property<int>("PerceptionUts");

                    b.Property<int>("PhysicalDamage");

                    b.Property<int>("PhysicalDamageMax");

                    b.Property<int>("PhysicsExp");

                    b.Property<string>("PhysicsSkills");

                    b.Property<int>("PhysicsTTp");

                    b.Property<string>("PhysicsTalang");

                    b.Property<int>("PhysicsTp");

                    b.Property<int>("PhysicsValue");

                    b.Property<int>("PhysiqueTot");

                    b.Property<int>("PhysiqueUts");

                    b.Property<int>("PsykeTot");

                    b.Property<int>("PsykeUts");

                    b.Property<int>("ResistanceExp");

                    b.Property<string>("ResistanceSkills");

                    b.Property<int>("ResistanceTTp");

                    b.Property<string>("ResistanceTalang");

                    b.Property<int>("ResistanceTp");

                    b.Property<int>("ResistanceValue");

                    b.Property<byte>("SerdanContact");

                    b.Property<string>("SerdanContactWho")
                        .HasMaxLength(50);

                    b.Property<int>("SocialTot");

                    b.Property<int>("SocialUts");

                    b.Property<int>("SoulDamage");

                    b.Property<int>("SoulDamageMax");

                    b.Property<int>("SparadePoang");

                    b.Property<int>("StrenghtExp");

                    b.Property<string>("StrenghtSkills");

                    b.Property<int>("StrenghtTTp");

                    b.Property<string>("StrenghtTalang");

                    b.Property<int>("StrenghtTp");

                    b.Property<int>("StrenghtValue");

                    b.Property<int>("SummaPoangKontakter");

                    b.Property<int>("TotalaPoang");

                    b.Property<int>("UtdeladePoang");

                    b.Property<int>("WeaponExp");

                    b.Property<string>("WeaponSkills");

                    b.Property<int>("WeaponTTp");

                    b.Property<string>("WeaponTalang");

                    b.Property<int>("WeaponTp");

                    b.Property<int>("WeaponValue");

                    b.Property<int>("WillExp");

                    b.Property<string>("WillSkills");

                    b.Property<int>("WillTTp");

                    b.Property<string>("WillTalang");

                    b.Property<int>("WillTp");

                    b.Property<int>("WillValue");

                    b.HasKey("NpcStatId");

                    b.ToTable("NpcStats");
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcsRegularChild", b =>
                {
                    b.Property<int>("NpcsRegularChildId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildId");

                    b.Property<string>("ChildName");

                    b.Property<int>("NpcId");

                    b.HasKey("NpcsRegularChildId");

                    b.HasIndex("NpcId");

                    b.ToTable("NpcsRegularChild");
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcsSerdanEdlosiChild", b =>
                {
                    b.Property<int>("NpcsSerdanEdlosiChildId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildId");

                    b.Property<string>("ChildName");

                    b.Property<int>("NpcId");

                    b.HasKey("NpcsSerdanEdlosiChildId");

                    b.HasIndex("NpcId");

                    b.ToTable("NpcsSerdanEdlosiChild");
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("PlaceDescription")
                        .HasMaxLength(200);

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("PlaceId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.Planet", b =>
                {
                    b.Property<int>("PlanetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DistanceToGalo")
                        .HasMaxLength(100);

                    b.Property<string>("PlanetDescription")
                        .HasMaxLength(200);

                    b.Property<string>("PlanetName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int>("PlanetRulerId");

                    b.HasKey("PlanetId");

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.Country", b =>
                {
                    b.HasOne("ATravelersGuideToSerdan.Models.Planet")
                        .WithMany("PlanetsCountries")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcAlly", b =>
                {
                    b.HasOne("ATravelersGuideToSerdan.Models.NPC")
                        .WithMany("NpcAllies")
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcEnemy", b =>
                {
                    b.HasOne("ATravelersGuideToSerdan.Models.NPC")
                        .WithMany("NpcEnemies")
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcFriend", b =>
                {
                    b.HasOne("ATravelersGuideToSerdan.Models.NPC")
                        .WithMany("NpcFriends")
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcRival", b =>
                {
                    b.HasOne("ATravelersGuideToSerdan.Models.NPC")
                        .WithMany("NpcRivals")
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcsRegularChild", b =>
                {
                    b.HasOne("ATravelersGuideToSerdan.Models.NPC")
                        .WithMany("NpcsRegularChildren")
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ATravelersGuideToSerdan.Models.NpcsSerdanEdlosiChild", b =>
                {
                    b.HasOne("ATravelersGuideToSerdan.Models.NPC")
                        .WithMany("NpcsSerdanEdlosiChildren")
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
